
# Generated by Django 3.0.6 on 2020-05-31 23:41

import accounting.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('accounting', '0002_accountbalance_accountledgers'),
    ]

    create_function_update_balances = """
    CREATE FUNCTION update_balances() RETURNS TRIGGER AS $$
    BEGIN
	      REFRESH MATERIALIZED VIEW account_balances;
	      RETURN NULL;
    END
    $$ LANGUAGE plpgsql;
    """

    drop_function_update_balances = """
    DROP FUNCTION IF EXISTS update_balances
    """

    create_trigger_fix_balance_entries = """
    CREATE TRIGGER trigger_fix_balance_entries
    AFTER INSERT
    OR UPDATE OF amount, credit_id, debit_id
    OR DELETE OR TRUNCATE
    ON accounting_entries
    FOR EACH STATEMENT
    EXECUTE PROCEDURE update_balances();
    """

    drop_trigger_fix_balances_entries = """
    DROP TRIGGER IF EXISTS trigger_fix_balance_entries ON accounting_entries;
    """

    create_trigger_fix_balance_accounts = """
    CREATE TRIGGER trigger_fix_balance_accounts
    AFTER INSERT
    OR UPDATE OF id
    OR DELETE OR TRUNCATE
    ON accounting_account
    FOR EACH STATEMENT
    EXECUTE PROCEDURE update_balances();
    """

    drop_trigger_fix_balance_accounts = """
    DROP TRIGGER IF EXISTS trigger_fix_balance_accounts ON accounting_account;
    """

    operations = [
        migrations.RunSQL(
            sql=create_function_update_balances,
            reverse_sql=drop_function_update_balances,
        ),
        migrations.RunSQL(
            sql=create_trigger_fix_balance_entries,
            reverse_sql=drop_trigger_fix_balances_entries
        ),
        migrations.RunSQL(
            sql=create_trigger_fix_balance_accounts,
            reverse_sql=drop_trigger_fix_balance_accounts
        ),
    ]
